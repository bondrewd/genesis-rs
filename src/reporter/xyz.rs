use crate::system::System;
use std::fs::File;
use std::io::{self, Write};
use std::path::Path;

#[derive(Debug)]
pub struct XYZReporter {
    file: File,
}

impl XYZReporter {
    pub fn new(file: File) -> Self {
        XYZReporter { file }
    }

    pub fn with_path<P: AsRef<Path>>(path: P) -> io::Result<Self> {
        let file = File::create(path.as_ref())?;
        Ok(XYZReporter::new(file))
    }

    pub fn write_report(&mut self, system: &System) -> io::Result<()> {
        // Init buffer
        let mut buffer = Vec::new();

        // Write the number of atoms (coordinates) at the top of the file
        buffer.extend_from_slice(format!("{}\n", system.n).as_bytes());

        // Write a comment line (can be empty or hold some metadata)
        buffer.extend_from_slice(b"Generated by genesis-rs\n");

        // Write each coordinate with an atom type (e.g., "C" for carbon in this example)
        for r in system.r.iter() {
            buffer.extend_from_slice(format!("Ar {} {} {}\n", r.x, r.y, r.z).as_bytes());
        }

        // Flush buffer
        self.file.write_all(&buffer)?;

        Ok(())
    }
}
